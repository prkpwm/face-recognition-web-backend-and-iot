{"ast":null,"code":"var _jsxFileName = \"/home/recognition/Desktop/face-recognition-web-backend-and-iot/frontend/src/components/Language/Language.jsx\";\nimport React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\nimport { message } from 'antd';\nimport { GetLanguage, SetLanguage } from \"../../services/APIs/Setting\";\nimport { RotateSpinner } from \"react-spinners-kit\";\nimport './language.scss';\nlibrary.add(fas);\n\nclass Language extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: 'TH',\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    GetLanguage() // Get language for display\n    .then(_Edit => {\n      if (_Edit.data.status) {\n        setTimeout(() => {\n          this.setState({\n            loading: false\n          });\n        }, 800);\n        this.setState({\n          language: _Edit.data.msg[0].lang\n        });\n      }\n    }).catch(_EditError => {\n      window.location.href = \"/password\";\n    });\n  }\n\n  onChangeLanguage(e) {\n    var lang = e.target.value;\n    this.setState({\n      language: lang\n    });\n    SetLanguage(lang) // change language\n    .then(_Language => {\n      if (_Language.data.status) {\n        message.success({\n          content: 'Done',\n          className: 'message-done',\n          style: {\n            marginTop: '2vh'\n          }\n        });\n      } else {\n        message.error({\n          content: 'Not Change Password',\n          className: 'message-alert',\n          style: {\n            marginTop: '5vh'\n          }\n        });\n      }\n    }).catch(_LanguageError => {\n      window.location.href = \"/password\";\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"size-web\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      style: {\n        visibility: this.state.loading ? \"visible\" : \"hidden\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(RotateSpinner, {\n      size: 150,\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cov-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hmenu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon-back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/setting\",\n      className: \"link-back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: ['fas', 'less-than'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 74\n      }\n    }))), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"hd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, \"Language\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"box-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cov-lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"container \" + (this.state.language === \"TH\" ? \"active\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 37\n      }\n    }, \"\\u0E44\\u0E17\\u0E22\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"check-box\",\n      type: \"checkbox\",\n      name: \"Language\",\n      checked: this.state.language == 'TH',\n      value: \"TH\",\n      onChange: e => {\n        this.onChangeLanguage(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"checkmark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"container \" + (this.state.language === \"EN\" ? \"active\" : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 37\n      }\n    }, \"English\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"check-box\",\n      type: \"checkbox\",\n      name: \"Language\",\n      checked: this.state.language == 'EN',\n      value: \"EN\",\n      onChange: e => {\n        this.onChangeLanguage(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"checkmark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 41\n      }\n    }))))))));\n  }\n\n}\n\nexport default Language;","map":{"version":3,"sources":["/home/recognition/Desktop/face-recognition-web-backend-and-iot/frontend/src/components/Language/Language.jsx"],"names":["React","FontAwesomeIcon","library","fas","far","message","GetLanguage","SetLanguage","RotateSpinner","add","Language","Component","constructor","props","state","language","loading","componentDidMount","setState","then","_Edit","data","status","setTimeout","msg","lang","catch","_EditError","window","location","href","onChangeLanguage","e","target","value","_Language","success","content","className","style","marginTop","error","_LanguageError","render","visibility"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\nimport { message } from 'antd';\nimport { GetLanguage, SetLanguage } from \"../../services/APIs/Setting\";\nimport { RotateSpinner } from \"react-spinners-kit\";\nimport './language.scss'\n\n\nlibrary.add(fas)\n\n\nclass Language extends React.Component {\n\n    constructor(props) {\n\n        super(props)\n        this.state = {\n            language: 'TH',\n            loading: false\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            loading: true\n        })\n        GetLanguage() // Get language for display\n            .then(_Edit => {\n                \n\n                if (_Edit.data.status) {\n\n                    setTimeout(() => {\n                        this.setState({\n                            loading: false\n                        })\n                      }, 800);\n                    this.setState({\n                        language: _Edit.data.msg[0].lang,\n                        \n                    })\n\n\n                }\n            })\n\n            .catch(_EditError => {\n                window.location.href = \"/password\";\n            })\n    }\n\n\n    onChangeLanguage(e) {\n        var lang = e.target.value;\n        this.setState({ language: lang })\n\n        SetLanguage(lang) // change language\n            .then(_Language => {\n                if (_Language.data.status) {\n\n                    message.success({\n                        content: 'Done',\n                        className: 'message-done',\n                        style: {\n                            marginTop: '2vh',\n                        },\n                    });\n\n                } else {\n                    message.error({\n                        content: 'Not Change Password',\n                        className: 'message-alert',\n                        style: {\n                            marginTop: '5vh',\n                        },\n                    });\n                }\n\n\n            })\n            .catch(_LanguageError => {\n                window.location.href = \"/password\";\n            })\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <div className=\"size-web\">\n                    <div className=\"loading\" style={{visibility: this.state.loading? \"visible\" : \"hidden\"}}>\n                        <RotateSpinner size={150} loading={this.state.loading} />\n                    </div>\n                    <div className=\"cov-menu\">\n\n                        <div className=\"hmenu\">\n                            <div className=\"icon-back\">\n                                <a href=\"/setting\" className=\"link-back\"><FontAwesomeIcon icon={['fas', 'less-than']} /></a>\n                            </div>\n                            <h1 className=\"hd\">Language</h1>\n                        </div>\n                        <div className=\"box-select\">\n                            <div className=\"cov-lang\">\n                                <div className=\"lang\">\n                                    <label className={\"container \" + (this.state.language === \"TH\" ? \"active\" : \"\")}>ไทย\n                                            <input className=\"check-box\" type=\"checkbox\" name=\"Language\"\n                                            checked={this.state.language == 'TH'}\n                                            value=\"TH\"\n                                            onChange={(e) => {\n                                                this.onChangeLanguage(e)\n                                            }}\n\n                                        />\n                                        <span className=\"checkmark\"></span>\n                                    </label>\n                                </div>\n                                <div className=\"lang\">\n                                    <label className={\"container \" + (this.state.language === \"EN\" ? \"active\" : \"\")}>English\n                                            <input className=\"check-box\" type=\"checkbox\" name=\"Language\"\n                                            checked={this.state.language == 'EN'}\n                                            value=\"EN\"\n                                            onChange={(e) => {\n                                                this.onChangeLanguage(e)\n                                            }}\n                                        />\n                                        <span className=\"checkmark\"></span>\n                                    </label>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n\n    }\n\n\n\n}\n\nexport default Language"]},"metadata":{},"sourceType":"module"}