{"ast":null,"code":"var _jsxFileName = \"/home/recognition/Desktop/face-recognition-web-backend-and-iot/frontend/src/components/NetworkConfig/NetworkConfig.jsx\";\nimport React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\nimport { message } from 'antd';\nimport { GetLanguage } from \"../../services/APIs/Setting\";\nimport { connectNetwork, getNetwork } from \"../../services/APIs/NetworkConfig\";\nimport { RotateSpinner } from \"react-spinners-kit\";\nimport './NetworkConfig.scss';\nlibrary.add(fas);\n\nclass NetworkConfig extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: 'TH',\n      loading: false,\n      available_networks: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    GetLanguage() // Get language for display\n    .then(_Edit => {\n      if (_Edit.data.status) {\n        setTimeout(() => {\n          this.setState({\n            loading: false\n          });\n        }, 800);\n        this.setState({\n          language: _Edit.data.msg[0].lang\n        });\n      }\n    }).catch(_EditError => {\n      window.location.href = \"/password\";\n    });\n    getNetwork() // Get language for display\n    .then(_Edit => {\n      if (_Edit.data.status) {\n        this.setState({\n          getNetwork: _Edit.data\n        });\n      }\n    });\n  }\n\n  new_connection() {\n    connectNetwork() // change language\n    .then(config => {\n      if (config.data.status) {\n        message.success({\n          content: 'Done',\n          className: 'message-done',\n          style: {\n            marginTop: '2vh'\n          }\n        });\n      } else {\n        message.error({\n          content: 'Not Change Password',\n          className: 'message-alert',\n          style: {\n            marginTop: '5vh'\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"size-web\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      style: {\n        visibility: this.state.loading ? \"visible\" : \"hidden\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(RotateSpinner, {\n      size: 150,\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cov-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hmenu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon-back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/setting\",\n      className: \"link-back\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: ['fas', 'less-than'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 74\n      }\n    }))), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"hd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, \"Network Configulation\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, this.state.available_networks))));\n  }\n\n}\n\nexport default NetworkConfig;","map":{"version":3,"sources":["/home/recognition/Desktop/face-recognition-web-backend-and-iot/frontend/src/components/NetworkConfig/NetworkConfig.jsx"],"names":["React","FontAwesomeIcon","library","fas","far","message","GetLanguage","connectNetwork","getNetwork","RotateSpinner","add","NetworkConfig","Component","constructor","props","state","language","loading","available_networks","componentDidMount","setState","then","_Edit","data","status","setTimeout","msg","lang","catch","_EditError","window","location","href","new_connection","config","success","content","className","style","marginTop","error","render","visibility"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\nimport { message } from 'antd';\nimport { GetLanguage } from \"../../services/APIs/Setting\";\nimport { connectNetwork, getNetwork } from \"../../services/APIs/NetworkConfig\";\nimport { RotateSpinner } from \"react-spinners-kit\";\nimport './NetworkConfig.scss'\n\n\nlibrary.add(fas)\n\n\nclass NetworkConfig extends React.Component {\n\n    constructor(props) {\n\n        super(props)\n        this.state = {\n            language: 'TH',\n            loading: false,\n            available_networks: [],\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            loading: true\n        })\n        GetLanguage() // Get language for display\n            .then(_Edit => {\n                if (_Edit.data.status) {\n                    setTimeout(() => {\n                        this.setState({\n                            loading: false\n                        })\n                    }, 800);\n                    this.setState({\n                        language: _Edit.data.msg[0].lang,\n\n                    })\n                }\n            })\n\n            .catch(_EditError => {\n                window.location.href = \"/password\";\n            })\n\n\n\n        getNetwork() // Get language for display\n            .then(_Edit => {\n                if (_Edit.data.status) {\n                    this.setState({\n                        getNetwork: _Edit.data,\n                    })\n                }\n            })\n    }\n\n    new_connection() {\n        connectNetwork() // change language\n            .then(config => {\n                if (config.data.status) {\n                    message.success({\n                        content: 'Done',\n                        className: 'message-done',\n                        style: {\n                            marginTop: '2vh',\n                        },\n                    });\n\n                } else {\n                    message.error({\n                        content: 'Not Change Password',\n                        className: 'message-alert',\n                        style: {\n                            marginTop: '5vh',\n                        },\n                    });\n                }\n            })\n    }\n\n\n\n\n\n\n    render() {\n\n        return (\n            <div>\n                <div className=\"size-web\">\n                    <div className=\"loading\" style={{ visibility: this.state.loading ? \"visible\" : \"hidden\" }}>\n                        <RotateSpinner size={150} loading={this.state.loading} />\n                    </div>\n                    <div className=\"cov-menu\">\n\n                        <div className=\"hmenu\">\n                            <div className=\"icon-back\">\n                                <a href=\"/setting\" className=\"link-back\"><FontAwesomeIcon icon={['fas', 'less-than']} /></a>\n                            </div>\n                            <h1 className=\"hd\">Network Configulation</h1>\n                        </div>\n                        <div>\n                            {this.state.available_networks}\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n\n    }\n\n\n\n}\n\nexport default NetworkConfig"]},"metadata":{},"sourceType":"module"}